<?phprequire_once __DIR__ . '/vendor/autoload.php';use YousefKadah\ApplePayDecoder\ApplePayDecryptionService;use YousefKadah\ApplePayDecoder\ApplePayDecoder;use YousefKadah\ApplePayDecoder\Config\MerchantConfig;use YousefKadah\ApplePayDecoder\Facade\ApplePay;echo "=== Apple Pay Decoder Examples ===\n\n";// Example payment token structure (replace with real data)$paymentToken = [    'version' => 'EC_v1',    'data' => 'base64-encoded-encrypted-data...',    'signature' => 'base64-encoded-signature...',    'header' => [        'ephemeralPublicKey' => 'base64-encoded-ephemeral-public-key...',        'publicKeyHash' => 'base64-encoded-public-key-hash...',        'transactionId' => 'hex-transaction-id...'    ]];// === Method 1: Using the Facade (Easiest) ===echo "1. Using ApplePay Facade (Recommended for quick usage):\n";try {    // Option 1a: One-time decryption    /*    $decryptedData = ApplePay::decrypt(        $paymentToken,        'merchant.com.yourcompany.app',        __DIR__ . '/certs/merchant_certificate.pem',        __DIR__ . '/certs/merchant_private_key.pem'    );    */    // Option 1b: Configure once, use multiple times    ApplePay::configure(        'merchant.com.yourcompany.app',        __DIR__ . '/certs/merchant_certificate.pem',        __DIR__ . '/certs/merchant_private_key.pem'    );        // Now you can use quickDecrypt multiple times    // $decryptedData = ApplePay::quickDecrypt($paymentToken);        echo "✅ Facade configured successfully\n";    echo "   Is configured: " . (ApplePay::isConfigured() ? 'Yes' : 'No') . "\n";} catch (\Exception $e) {    echo "❌ Facade Error: " . $e->getMessage() . "\n";}echo "\n";// === Method 2: Using Environment Variables ===echo "2. Using Environment Variables:\n";try {    // Set environment variables (or use .env file)    $_ENV['APPLE_PAY_MERCHANT_ID'] = 'merchant.com.yourcompany.app';    $_ENV['APPLE_PAY_CERT_PATH'] = __DIR__ . '/certs/merchant_certificate.pem';    $_ENV['APPLE_PAY_KEY_PATH'] = __DIR__ . '/certs/merchant_private_key.pem';    // Configure from environment    ApplePay::configureFromEnvironment();        // Now use quickDecrypt    // $decryptedData = ApplePay::quickDecrypt($paymentToken);        echo "✅ Environment configuration successful\n";} catch (\Exception $e) {    echo "❌ Environment Error: " . $e->getMessage() . "\n";}echo "\n";// === Method 3: Using the Service Class Directly ===echo "3. Using ApplePayDecryptionService directly:\n";try {    $config = new MerchantConfig(        'merchant.com.yourcompany.app',        __DIR__ . '/certs/merchant_certificate.pem',        __DIR__ . '/certs/merchant_private_key.pem'    );    $service = new ApplePayDecryptionService($config);        // $decryptedData = $service->decrypt($paymentToken);        echo "✅ Service created successfully\n";        // Validate configuration    $issues = $service->validateConfiguration();    if (empty($issues)) {        echo "✅ Configuration is valid\n";    } else {        echo "⚠️  Configuration issues: " . implode(', ', $issues) . "\n";    }} catch (\Exception $e) {    echo "❌ Service Error: " . $e->getMessage() . "\n";}echo "\n";// === Method 4: Legacy Compatibility ===echo "4. Legacy ApplePayDecoder compatibility:\n";try {    $config = new MerchantConfig(        'merchant.com.yourcompany.app',        __DIR__ . '/certs/merchant_certificate.pem',        __DIR__ . '/certs/merchant_private_key.pem'    );        $decoder = new ApplePayDecoder($config);    // $result = $decoder->decrypt($paymentToken);        echo "✅ Legacy decoder still works (delegates to service)\n";} catch (\Exception $e) {    echo "❌ Legacy Error: " . $e->getMessage() . "\n";}echo "\n";// === System Validation ===echo "5. System Requirements Validation:\n";try {    $systemIssues = ApplePay::validateSystem();        if (empty($systemIssues)) {        echo "✅ All system requirements met\n";    } else {        echo "❌ System issues found:\n";        foreach ($systemIssues as $issue) {            echo "   - $issue\n";        }    }} catch (\Exception $e) {    echo "❌ Validation Error: " . $e->getMessage() . "\n";}echo "\n";// === Usage Tips ===echo "=== Usage Tips ===\n";echo "• For Laravel: Use the facade in service providers or controllers\n";echo "• For one-time use: ApplePay::decrypt() method\n";echo "• For repeated use: ApplePay::configure() then quickDecrypt()\n";echo "• For production: Use environment variables\n";echo "• For testing: Use the validation methods\n";echo "• Legacy code: ApplePayDecoder class still works\n\n";echo "=== Example Real Usage ===\n";echo "```php\n";echo "// Quick usage\n";echo "\$result = ApplePay::decrypt(\$token, \$merchantId, \$certPath, \$keyPath);\n\n";echo "// With configuration\n";echo "ApplePay::configure(\$merchantId, \$certPath, \$keyPath);\n";echo "\$result = ApplePay::quickDecrypt(\$token);\n\n";echo "// Environment-based\n";echo "ApplePay::configureFromEnvironment();\n";echo "\$result = ApplePay::quickDecrypt(\$token);\n";echo "```\n\n";echo "Done! 🎉\n";